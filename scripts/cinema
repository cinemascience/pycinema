#!/usr/bin/env python

import sys
import argparse
import pycinema
import logging as log

class LogfileAction(argparse.Action):
    def __call__(self, parser, namespace, filename, option_string=None):
        if not filename:
            filename = "log.txt"
        setattr(namespace, self.dest, filename)


# create help text and handle some command line arguments 
helptext = "\n\
\n\
examples: \n\
\n\
  cinema view some.cdb\n\
    run the \'view\' workspace on some.cdb\n\
\n\
  cinema explorer some.cdb\n\
    run the \'explorer\' workspace  on some.cdb\n\
\n\
"

# normal option parsing
parser = argparse.ArgumentParser( description="a command to access cinema viewers, filters and algorithms",
                                  epilog=helptext,
                                  formatter_class=argparse.RawDescriptionHelpFormatter )

parser.add_argument( "--version", action="version", version=pycinema.__version__)
parser.add_argument( "-v", "--verbose", action="store_true" )
parser.add_argument(       "--logtofile", nargs="?", type=str, action=LogfileAction, help="write log messages to file; optionally provide filename (default is log.txt)") 
parser.add_argument(       "--headless", action="store_true" )

# parse args, gather unknowns
args, remainder = parser.parse_known_args()

# set up logging
if args.logtofile:
    file_handler = log.FileHandler(args.logtofile)
    log.getLogger().addHandler(file_handler)

  # turn off external logging
log.getLogger("tensorflow").setLevel(log.WARNING)
log.getLogger("PIL").setLevel(log.WARNING)
log.getLogger("urllib3").setLevel(log.WARNING)
log.getLogger("matplotlib").setLevel(log.WARNING)
log.getLogger("h5py").setLevel(log.WARNING)
if args.verbose:
    log.getLogger().setLevel(log.DEBUG)
else: 
    log.getLogger().setLevel(log.INFO)

if args.headless:
    script = pycinema.Core.readScriptFromPath(remainder[0]) 

    variables = {}
    for i,arg in enumerate(remainder):
      variables['PYCINEMA_ARG_'+str(i)] = arg
    try:
        exec(script, variables) 
    except Exception as err:
      traceback.print_exc()

else:
    # keep going if the command line args allow it
    import pycinema.theater

    pycinema.theater.Theater(remainder)

