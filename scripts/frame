#!/usr/bin/env python

import argparse
import pycinema
import pycinema.filters
# import pycinema.scripts
import yaml

# pycinema settings
PYCINEMA = { 'VERSION' : '3.1.0'}

def function_compose(args):
    if args.debug:
        # enable debug output (e.g., timings)
        pycinema.Filter._debug = True

    if args.config:
        # load the config
        with open(args.config, 'r') as file:
            configdata = yaml.safe_load(file)

        # create and execute a composite object
        composite = pycinema.scripts.compose.Composite(configdata)
        composite.update()

def function_meta(args):
    print("meta")

# set up parsers
parser = argparse.ArgumentParser(description="Cinema  command line tool")
subparsers = parser.add_subparsers(dest='command', help='Sub-commands')

# Subparser
parser_compose = subparsers.add_parser('compose', help='convert Cinema float (hdf5) images to .png')
parser_compose.add_argument('--debug', action='store_true', help='set debug mode')
parser_compose.add_argument('config', help='define the configuration file')
parser_compose.set_defaults(func=function_compose)

# Subparser for command 'meta'
parser_meta = subparsers.add_parser('meta', help='dump descriptive metadata about a cinema database')
parser_meta.add_argument('--debug', action='store_true', help='set debug mode')
parser_meta.add_argument('--filecolumn', default="FILE", help='define FILE column name')
parser_meta.add_argument('-v', '--verbose', action='store_true', help='enable verbose output')
parser_meta.add_argument('source', help='source cinema database')
parser_meta.set_defaults(func=function_meta)

# parse and call subcommand arguments
args = parser.parse_args()

# Call the appropriate function based on the subcommand
if args.command:
    args.func(args)
else:
    parser.print_help()
